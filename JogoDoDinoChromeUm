import pygame
from pygame.locals import *
from sys import exit
from random import randrange, choice
import os

pygame.init()
pygame.mixer.init()

diretorioPrincipal = os.path.dirname(__file__)
diretorioImagens = os.path.join(diretorioPrincipal, "Imagens")
diretorioSons = os.path.join(diretorioPrincipal, "Sons")
#print(diretorioPrincipal)
largura = 1595
autura = 900

branco = (255, 255, 255)

tela = pygame.display.set_mode((largura, autura))
pygame.display.set_caption("DINO GAME")

spritSheet = pygame.image.load(os.path.join(diretorioImagens, "dinoSpritesheet.png")).convert_alpha()

somColisao = pygame.mixer.Sound(os.path.join(diretorioSons, "sons_death_sound.wav"))
somColisao.set_volume(1)
somPontuacao = pygame.mixer.Sound(os.path.join(diretorioSons, "sons_score_sound.wav"))
somPontuacao.set_volume(1)
colidiu = False

escolhaObstaculo = choice([0, 1])
pontos = 0
velocidadeJogo = 10
def ExibeMensagem(mensagem, tamanho, cor):
    fonte = pygame.font.SysFont("comicsansmsm", tamanho, True, False)
    mensagem = f"{mensagem}"
    textoFormatado = fonte.render(mensagem, True, cor)
    return textoFormatado

def ReiniciarJogo():
    global pontos, velocidadeJogo, colidiu, escolhaObstaculo
    pontos = 0
    velocidadeJogo = 10
    colidiu = False
    dino.rect.y = autura - 64 - 96//2
    dino.pulo = False
    dinoVoador.rect.x = largura
    cactus.rect.x = largura
    escolhaObstaculo = choice([0, 1])
class Dino(pygame.sprite.Sprite):  #DINOSAURO
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.somDoPulo = pygame.mixer.Sound(os.path.join(diretorioSons, "sons_jump_sound.wav"))
        self.somDoPulo.set_volume(1)
        self.imagensDinosauro = []
        for i in range(3):
            img = spritSheet.subsurface((i * 32, 0), (32, 32))
            img = pygame.transform.scale(img, (32 * 3, 32 * 3))

            self.imagensDinosauro.append(img)
        self.indexLista = 0
        self.image = self.imagensDinosauro[self.indexLista]
        self.rect = self.image.get_rect()
        self.mask = pygame.mask.from_surface(self.image)
        self.posicaoyInicial = autura - 64 - 96 // 2
        self.rect.center = (100, autura - 64)
        self.pulo = False

    def pular(self):
        self.pulo = True
        self.somDoPulo.play()

    def update(self):
        if self.pulo == True:
            if self.rect.y <= 550:
                self.pulo = False
            self.rect.y -= 20
        else:
            if self.rect.y < self.posicaoyInicial:
                self.rect.y += 20
            else:
                self.rect.y = self.posicaoyInicial
        if self.indexLista > 2:
            self.indexLista = 0
        self.indexLista += 0.25
        self.image = self.imagensDinosauro[int(self.indexLista)]


class Nuvens(pygame.sprite.Sprite):  #NUVESS
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = spritSheet.subsurface((7 * 32, 0), (32, 32))
        self.image = pygame.transform.scale(self.image, (32 * 3, 32 * 3))
        self.rect = self.image.get_rect()
        #self.rect.center = (100, 100)
        self.rect.y = randrange(50, 200, 50)
        self.rect.x = largura - randrange(30, 300, 90)

    def update(self):
        if self.rect.topright[0] < 0:
            self.rect.x = largura
            #self.rect.x = largura - randrange(30, 300, 90)
            self.rect.y = randrange(50, 200, 50)
        self.rect.x -= velocidadeJogo


class Chao(pygame.sprite.Sprite):
    def __init__(self, posx):
        pygame.sprite.Sprite.__init__(self)
        self.image = spritSheet.subsurface((6 * 32, 0), (32, 32))
        self.image = pygame.transform.scale(self.image, (32 * 2, 32 * 2))
        self.rect = self.image.get_rect()
        #self.radius = 25
        self.mask = pygame.mask.from_surface(self.image)
        self.rect.y = autura - 64
        self.rect.x = posx * 64

    def update(self):
        if self.rect.topright[0] < 0:
            self.rect.x = largura
            #self.rect.x = largura - randrange(30, 300, 90)
            #self.rect.y = randrange(50, 200, 50)
        self.rect.x -= 10


class Cactus(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = spritSheet.subsurface((5 * 32, 0), (32, 32))
        self.image = pygame.transform.scale(self.image, (32 * 2, 32 * 2))
        self.rect = self.image.get_rect()
        self.rect.center = (largura, autura - 64)
        self.rect.x = largura
        self.mask = pygame.mask.from_surface(self.image)
        self.escolha = escolhaObstaculo
    def update(self):# MOVIMENTA O CACTUS
        if self.escolha == 0:
            if self.rect.topright[0] < 0:
                self.rect.x = largura
            self.rect.x -= velocidadeJogo

class DinoVoador(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.imagensDinosalro = []
        for i in range(3,5):
            img = spritSheet.subsurface((i*32, 0), (32, 32))
            img = pygame.transform.scale(img, (32*3, 32*3))
            self.imagensDinosalro.append(img)

        self.index_lista = 0
        self.image = self.imagensDinosalro[self.index_lista]
        self.mask = pygame.mask.from_surface(self.image)
        self.escolha = escolhaObstaculo
        self.rect = self.image.get_rect()
        self.rect.center = (largura, 700)
        self.rect.x = largura
    def update(self):
        if self.escolha == 1:
            if self.rect.topright[0] < 0:
                self.rect.x = largura
            self.rect.x -= velocidadeJogo

            if self.index_lista > 1:
                self.index_lista = 0
            self.index_lista += 0.25
            self.image = self.imagensDinosalro[int(self.index_lista)]


todasASprites = pygame.sprite.Group()
dino = Dino()
todasASprites.add(dino)

for i in range(4):
    nuvem = Nuvens()
    todasASprites.add(nuvem)

for i in range(largura * 2 // 64):
    chao = Chao(i)
    todasASprites.add(chao)

cactus = Cactus()
todasASprites.add(cactus)

dinoVoador = DinoVoador()
todasASprites.add(dinoVoador)

gruposObstaculos = pygame.sprite.Group()
gruposObstaculos.add(cactus)
gruposObstaculos.add(dinoVoador)
#todasASprites.add(chao)

#nuvem = Nuvens()
#todasASprites.add(nuvem)

relogio = pygame.time.Clock()

while True:
    relogio.tick(30)
    tela.fill(branco)
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            exit()
        if event.type == KEYDOWN:
            if event.key == K_SPACE and colidiu == False:
                if dino.rect.y != dino.posicaoyInicial:
                    pass
                else:
                    dino.pular()
            if event.key == K_r and colidiu == True:
                ReiniciarJogo()

    colisoes = pygame.sprite.spritecollide(dino, gruposObstaculos, False, pygame.sprite.collide_mask)
    todasASprites.draw(tela)

    if cactus.rect.topright[0] <= 0 or dinoVoador.rect.topright[0] <= 0:
        escolhaObstaculo = choice([0, 1])
        cactus.rect.x = largura
        dinoVoador.rect.x = largura
        cactus.escolha = escolhaObstaculo
        dinoVoador.escolha = escolhaObstaculo
                #dino.pular()
    if colisoes and colidiu == False:
        somColisao.play()
        colidiu = True
    if colidiu == True:
        if pontos % 100 == 0:
            pontos += 1
        gameOver = ExibeMensagem("GAME OVER", 80, (0, 0, 0))
        tela.blit(gameOver, (largura//2, autura//2))
        reStart = ExibeMensagem("Aperte R para Jogar Novamente", 40, (0, 0, 0))
        tela.blit(reStart, (largura//2, (autura//2 + 60)))
    else:
        pontos += 1
        todasASprites.update()
        textoPontos = ExibeMensagem(pontos, 40, (0, 0, 0))
    if pontos % 100 == 0:
        somPontuacao.play()
        if velocidadeJogo >= 23:
            velocidadeJogo += 0
        else:
            velocidadeJogo += 1
            #print(velocidadeJogo)
    tela.blit(textoPontos, (70, 30))



    pygame.display.flip()
